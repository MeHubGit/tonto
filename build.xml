<?xml version="1.0"?>

<project name="tonto" default="all">

  <property name="doc.pkgs" value="com.neuron.app.tonto" />
  <property name="libclean" value="dummy" />
  <property name="merge" value="merge" />

  <!--
   BUILD COMMON TEMPLATE FILE. This gets included into most build.xml
   files via the DTD system entity reference feature.

   PROPERTY SWITCHES:

     gcj - set to any value to trigger build of gcj native library
     jdk - set to value corresponding to your jdk version

	 gcj.out - name of executable target for gcj standalone build
	 gcj.main - name of class with main for gcj.out
   -->

  <!-- common project settings -->
  <property name="dir.tmp" value="${basedir}/tmp" />
  <property name="dir.jars" value="${basedir}/jars" />
  <property name="dir.libs" value="${basedir}/libs" />
  <property name="dir.docs" value="${basedir}/doc" />
  <property name="dir.jdoc" value="${dir.docs}/javadoc" />
  <property name="dir.etc" value="${basedir}/etc" />
  <property name="dir.res" value="${dir.etc}/res" />
  <property name="manifest" value="${dir.etc}/MANIFEST.MF" />
  <property name="dir.source" value="${basedir}/source" />
  <property name="dir.classes" value="${dir.tmp}/classes" />
  <property name="dir.merge" value="${dir.tmp}/merge" />
  <property name="dir.install" value="${basedir}/../../apps/java" />
  <property name="dir.install.jars" value="${dir.install}/jars" />
  <property name="dir.install.libs" value="${dir.install}/libs" />
  <property name="build.jar" value="${dir.jars}/${ant.project.name}.jar" />
  <property name="build.lib" value="${dir.libs}/lib${ant.project.name}.so" />
  <property name="build.jni" value="${dir.libs}/libjni${ant.project.name}.so" />
  <property name="build.c" value="${dir.libs}/${ant.project.name}.c" />
  <property name="jdk" value="ibm130" />
  <property name="libclean" value="**/*.so" />

  <patternset id="alljars">
    <include name="**/*.jar" />
    <exclude name="${ant.project.name}.jar" />
  </patternset>

  <patternset id="alllibs">
    <include name="**/*.so" />
  </patternset>

  <!-- create target/scratch directories -->
  <target name="init">
    <mkdir dir="${dir.res}" />
    <mkdir dir="${dir.jars}" />
    <mkdir dir="${dir.libs}" />
    <mkdir dir="${dir.merge}" />
    <mkdir dir="${dir.classes}" />
  </target>

  <!-- clean up just the classes and object files -->
  <target name="tidy" depends="init">
    <delete dir="${dir.merge}" quiet="true" />
    <delete dir="${dir.classes}" quiet="true" />
    <delete includeEmptyDirs="true">
      <fileset dir="${dir.libs}" includes="**/*.o" />
    </delete>
  </target>

  <!-- clean up all our droppings -->
  <target name="clean" depends="tidy">
    <delete file="${build.jar}" quiet="true" />
    <delete>
      <fileset dir="${dir.libs}" includes="${libclean}" />
    </delete>
  </target>

  <!-- install into dir.install -->
  <target name="install" depends="all">
    <copy file="${build.jar}" todir="${dir.install.jars}" />
    <copy todir="${dir.install.libs}">
      <fileset dir="${dir.libs}">
        <patternset refid="alllibs" />
      </fileset>
    </copy>
  </target>

  <!-- compile project -->
  <target name="java.compile" depends="init">
    <javac srcdir="${dir.source}" destdir="${dir.classes}">
      <classpath>
        <pathelement path="${classpath}" />
        <fileset dir="${dir.jars}">
          <patternset refid="alljars" />
        </fileset>
      </classpath>
    </javac>
  </target>

  <!-- unjar dependent jars into merge area -->
  <target name="jar.merge" if="merge">
	<antcall target="${merge}" />
  </target>

  <!-- create project jar -->
  <target name="java.jar" depends="java.compile,jar.merge">
    <jar jarfile="${build.jar}" manifest="${manifest}">
      <fileset dir="${dir.res}">
        <include name="**/*" />
        <exclude name="**/.*" />
      </fileset>
      <fileset dir="${dir.source}">
        <exclude name="**/*.java" />
        <exclude name="**/.*" />
      </fileset>
      <fileset dir="${dir.classes}">
        <include name="**/*.class" />
      </fileset>
      <fileset dir="${dir.merge}">
        <exclude name="META-INF/**/*" />
        <exclude name="Properties" />
        <exclude name="**/.*" />
      </fileset>
    </jar>
	<signjar jar="${build.jar}" alias="mykey" keystore="/Users/stewart/.keystore" storepass="blackDOG" />
  </target>

  <!-- check of gcj.lib is out of date -->
  <target name="gcj.lib.check" if="gcj">
    <uptodate property="skip.gcj.lib" targetfile="${build.lib}">
      <srcfiles dir="${dir.jars}" includes="**/*.jar" />
    </uptodate>
  </target>

  <!-- compile native java library -->
  <target name="gcj.lib" if="gcj" depends="gcj.lib.check,java.jar" unless="skip.gcj.lib">
    <echo message="building gcj native library" />
    <exec executable="gcj" dir="${dir.libs}">
      <env key="CLASSPATH" value="" />
      <arg value="-fjni" />
      <arg value="-shared" />
      <arg value="-o" />
      <arg value="${build.lib}" />
      <arg value="${build.jar}" />
    </exec>
  </target>

  <!-- main target for gcj built executable if indicated -->
  <target name="gcj-main" if="gcj.out" depends="all">
    <exec executable="gcj">
	  <arg line="-o ${gcj.out} --main=${gcj.main} ${build.jar} ${build.lib}" />
	</exec>
  </target>

  <!-- jni targets for various JDK's -->
  <target name="jni">
    <uptodate property="skip.jni.lib" targetfile="${build.jni}">
      <srcfiles dir="${dir.libs}">
        <include name="**/*.c" />
        <include name="**/*.h" />
      </srcfiles>
    </uptodate>
    <available property="do.jni.lib" file="${build.c}" />
    <antcall target="jni-${jdk}" />
  </target>

  <!-- jni target for IBM 1.3 series of JDK -->
  <target name="jni-ibm130" unless="skip.jni.lib" if="do.jni.lib">
    <echo message="building java native library" />
    <exec executable="cc" dir="${dir.libs}">
      <arg value="-shared" />
      <arg value="-o" />
      <arg value="${build.jni}" />
      <arg value="${build.c}" />
      <arg value="-I." />
      <arg value="-I${java.home}/../include" />
      <arg value="-L${java.home}/../jre/bin" />
      <arg value="-L${java.home}/../jre/bin/classic" />
      <arg value="-D_REENTRANT" />
      <arg value="-ljava" />
      <arg value="-ljvm" />
      <arg value="-lhpi" />
      <arg value="-lpthread" />
    </exec>
  </target>

  <!-- jni target for gcj series of JDK -->
  <target name="jni-gcj" unless="skip.jni.lib" if="do.jni.lib">
    <echo message="building java native library" />
    <exec executable="gcj" dir="${dir.libs}">
      <arg value="-shared" />
      <arg value="-o" />
      <arg value="${build.jni}" />
      <arg value="${build.c}" />
      <arg value="-I." />
    </exec>
  </target>

  <!-- make javadoc -->
  <target name="javadoc">
	<delete dir="${dir.jdoc}" />
	<mkdir dir="${dir.jdoc}" />
    <javadoc
	  sourcepath="${dir.source}"
	  packagenames="${doc.pkgs}"
	  destdir="${dir.jdoc}"
	  public="yes" />
  </target>

  <!-- force clean and make all -->
  <target name="remake">
    <antcall target="clean" />
    <antcall target="all" />
  </target>

  <!-- remake and install -->
  <target name="reinstall">
    <antcall target="remake" />
    <antcall target="install" />
  </target>

  <!-- build all targets -->
  <target name="all" depends="java.jar, gcj.lib, jni" />

  <!-- prints some useful information -->
  <target name="info">
    <echo message="java.home=${java.home}" />
    <echo message="user.home=${user.home}" />
    <echo message="build.compiler=${build.compiler}" />
    <echo message="java.class.path=${java.class.path}" />
  </target>

  <!-- begin tonto-specific entries -->
  <property name="version" value="1.48" />
  <property name="appdir"  value="${dir.tmp}/tonto" />
  <property name="docdir"  value="${appdir}/doc" />
  <property name="bindir"  value="${appdir}/bin" />
  <property name="libdir"  value="${appdir}/lib" />
  <property name="distdir" value="${dir.tmp}/dist" />
  <property name="osxsrc"  value="${dir.etc}/Tonto.app" />
  <property name="osxdst"  value="${dir.tmp}/Tonto-${version}.app" />
  <property name="macdir"  value="${osxdst}/Contents/Resources/Java" />
  <property name="bootjar" value="${dir.jars}/boot.jar" />

  <target name="modern" depends="all,native.jar" description="latest greates build / deploy">
  	<exec command="scp jars/tonto.jar jars/libs.jar sallen@digit.neuron.com:web/giantlaser/tonto2/" />
  </target>

  <target name="merge">
	<echo file="${dir.res}/version" message="${version}" />
    <unzip src="${dir.jars}/mrj.jar"  dest="${dir.merge}" />
    <!--unzip src="${dir.jars}/rxtx.jar"  dest="${dir.merge}" /-->
    <!--unzip src="${dir.jars}/irdb.jar"  dest="${dir.merge}" /-->
    <!--unzip src="${dir.jars}/jcomm.jar" dest="${dir.merge}" /-->
    <!--unzip src="${dir.jars}/jcore.jar" dest="${dir.merge}" /-->
  </target>

  <target name="sweep" depends="clean">
    <delete dir="${dir.tmp}" />
    <delete dir="${dir.jdoc}" />
    <delete file="${bootjar}" />
    <delete file="${dir.etc}/tonto.spec" />
  </target>

  <!-- create boot jar -->
  <target name="boot" depends="java.compile,jar.merge,java.jar">
    <jar jarfile="${bootjar}" manifest="${dir.etc}/MANIFEST.BOOT">
      <fileset dir="${dir.classes}">
        <include name="Boot.class" />
      </fileset>
    </jar>
  </target>

  <target name="release">
    <property name="uploaddir" value="tonto/dload" />
    <property name="vpostfix" value="ok" />
    <!--antcall target="dist" /-->
    <antcall target="send" />
  </target>

  <!-- create native libraries jar -->
  <target name="native.jar" depends="">
    <jar jarfile="${dir.jars}/libs.jar">
      <fileset dir="${dir.libs}">
        <include name="**/*.so" />
        <include name="**/cyg*.dll" />
        <include name="**/jni*.dll" />
        <include name="**/*.jnilib" />
      </fileset>
    </jar>
	<signjar jar="${dir.jars}/libs.jar" alias="mykey" keystore="/Users/stewart/.keystore" storepass="blackDOG" />
  </target>

  <target name="release-test">
    <property name="uploaddir" value="tonto/dload" />
    <property name="vpostfix" value="test" />
    <!--antcall target="dist" /-->
    <antcall target="send" />
  </target>

  <!-- create distribution -->
  <target name="dist">
    <ant target="sweep" />
    <echo message="${version}" file="${dir.etc}/VERSION" />
    <ant target="all" />
    <ant target="boot" />
    <ant target="javadoc" />
    <!-- setup dirs -->
    <delete dir="${appdir}" />
    <mkdir dir="${appdir}" />
    <mkdir dir="${bindir}" />
    <mkdir dir="${docdir}" />
    <mkdir dir="${libdir}" />
    <mkdir dir="${distdir}" />
    <mkdir dir="${dir.tmp}/dist" />
    <!-- copy files -->
    <copy file="jars/boot.jar"              todir="${bindir}" />
    <copy file="jars/tonto.jar"             todir="${bindir}" />
    <copy file="bin/tonto.sh"               todir="${bindir}" />
    <copy file="bin/tonto.bat"              todir="${bindir}" />
    <!--copy file="bin/Launcher.pif"           todir="${bindir}" /-->
    <copy file="${dir.docs}/readme.txt"     todir="${appdir}" />
    <copy file="${dir.docs}/changelog.txt"  todir="${appdir}" />
    <copy file="${dir.docs}/ccf-format.txt" todir="${appdir}" />
    <copy file="${dir.docs}/LICENSE.txt"    todir="${appdir}" />
    <copy file="${dir.etc}/VERSION"         todir="${appdir}" />
    <copy todir="${libdir}">
      <fileset dir="${dir.libs}">
        <include name="**/lib*" />
      </fileset>
    </copy>
    <copy todir="${bindir}">
      <fileset dir="${dir.libs}">
        <include name="**/*.dll" />
      </fileset>
    </copy>
    <copy todir="${docdir}">
      <fileset dir="${dir.jdoc}">
        <include name="**/*" />
      </fileset>
    </copy>
    <!-- create targets -->
    <antcall target="dist.zip" />
    <antcall target="dist.tar" />
    <antcall target="dist.osx" />
	<!--
    <antcall target="dist.rpm" />
    <antcall target="dist.win" />
	-->
    <antcall target="dist.src" />
  </target>

  <!-- build zip file -->
  <target name="dist.zip">
    <zip zipfile="${distdir}/tonto-${version}.zip">
      <zipfileset dir="${basedir}/tmp">
        <include name="tonto/**" />
      </zipfileset>
    </zip>
  </target>

  <!-- build gzip tar file -->
  <target name="dist.tar">
	<!-- ant's build-in tar is broken! -->
    <!--
    <tar tarfile="${distdir}/tonto-${version}.tar">
      <tarfileset dir="${basedir}/tmp">
        <include name="tonto/**" />
      </tarfileset>
    </tar>
    <gzip src="${distdir}/tonto-${version}.tar"
          zipfile="${distdir}/tonto-${version}.tar.gz" />
    -->
    <exec executable="tar" dir="${dir.tmp}">
      <arg value="-zcf" />
      <arg value="${distdir}/tonto-${version}.tar.gz" />
      <arg value="--exclude" />
      <arg value="tonto/bin/cygwin1.dll" />
      <arg value="--exclude" />
      <arg value="tonto/bin/Serial.dll" />
      <arg value="--exclude" />
      <arg value="tonto/bin/jnijcomm.dll" />
      <arg value="tonto" />
    </exec>
  </target>

  <!-- build mac app -->
  <target name="dist.osx">
    <mkdir dir="${osxdst}" />
    <mkdir dir="${macdir}" />
    <copy todir="${osxdst}">
      <fileset dir="${osxsrc}" />
    </copy>
    <copy file="${build.jar}" todir="${macdir}" />
    <copy file="${bootjar}" todir="${macdir}" />
    <copy
      file="${libdir}/libjnijcomm.jnilib"
      todir="${macdir}" />
    <delete file="${distdir}/Tonto-${version}.app.zip" />
    <zip zipfile="${distdir}/Tonto-${version}.app.zip">
      <zipfileset dir="${basedir}/tmp/" filemode="755">
        <include name="Tonto-${version}.app/**" />
      </zipfileset>
    </zip>
  </target>

  <!-- build linux RPM -->
  <target name="dist.rpm">
    <echo message="user.home = ${user.home}" />
    <filter token="version" value="${version}" />
    <filter token="dir" value="${appdir}-rpm" />
    <copy
      file="${dir.etc}/tonto.spec.new"
      tofile="${dir.etc}/tonto.spec"
      filtering="true" />
    <delete dir="/tmp/noarch" />
    <delete dir="${appdir}-rpm" />
    <copy todir="${appdir}-rpm/usr/share/tonto">
      <fileset dir="${appdir}">
        <exclude name="**/*.bat" />
        <exclude name="**/*.dll" />
        <exclude name="**/*lib" />
      </fileset>
    </copy>
    <copy
      file="${appdir}-rpm/usr/share/tonto/bin/tonto.sh"
      tofile="${appdir}-rpm/usr/local/bin/tonto" />
    <exec executable="chmod">
      <arg value="755" />
      <arg value="${appdir}-rpm/usr/local/bin/tonto" />
	</exec>
    <exec executable="rpmbuild">
      <arg value="-bb" />
      <arg value="--target"/>
      <arg value="noarch"/>
      <arg value="${dir.etc}/tonto.spec" />
    </exec>
    <copy
      file="/tmp/noarch/tonto-${version}-1.noarch.rpm"
      todir="${distdir}" />
    <delete dir="/tmp/noarch" />
  </target>

  <!-- build windows installer -->
  <target name="dist.win">
    <copy
      file="${dir.etc}/tonto.iap_xml"
      todir="${dir.tmp}" />
    <exec executable="ia50now">
      <arg value="${dir.tmp}/tonto.iap_xml" />
    </exec>
    <copy
      file="${dir.tmp}/tonto_Build_Output/Web_Installers/InstData/Windows/VM/InstallTonto.exe"
      tofile="${distdir}/tonto-${version}.exe" />
    <!-- copy
      file="${dir.tmp}/tonto_Build_Output/Web_Installers/InstData/Windows/NoVM/InstallTonto.exe"
      tofile="${distdir}/tonto-${version}-novm.exe" /-->
  </target>

  <!-- build source ball -->
  <target name="dist.src">
    <zip filesonly="true" zipfile="${distdir}/tonto-${version}-src.zip">
      <zipfileset dir="${basedir}">
        <include name="**" />
        <exclude name="**/*.class" />
        <exclude name="**/*.jnilib" />
        <exclude name="**/*.jar" />
        <exclude name="**/*.dll" />
        <exclude name="**/*.swp" />
        <exclude name="**/*.so" />
        <exclude name="**/.*" />
        <exclude name="**/map.*" />
        <exclude name="archive/**" />
        <exclude name="tmp/**" />
        <exclude name="doc/javadoc/**" />
        <exclude name="doc/ref/**" />
        <exclude name="**/.xvpics/" />
      </zipfileset>
    </zip>
  </target>

  <!-- upload to neuron -->
  <target name="send">
    <copy file="${dir.etc}/VERSION" tofile="${distdir}/version.${vpostfix}" />
    <echo message="uploaddir = ${uploaddir}" />
    <!-- rsync -->
    <exec executable="rsync">
      <arg value="-avr" />
      <!--arg value="-e" /-->
      <!--arg value="ssh" /-->
      <arg value="${distdir}/" />
      <!--arg value="neuron.com:/home/stewart/web/giantlaser/${uploaddir}/" /-->
      <arg value="${user.home}/web/giantlaser/${uploaddir}/" />
    </exec>
    <!-- untar -->
    <exec executable="tar" dir="${user.home}/web/giantlaser/tonto">
      <arg value="-zxf" />
      <arg value="${distdir}/tonto-${version}.tar.gz" />
    </exec>
  </target>

</project>

